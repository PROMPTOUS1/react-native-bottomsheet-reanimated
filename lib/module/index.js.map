{"version":3,"sources":["index.tsx"],"names":["React","useState","useRef","forwardRef","useImperativeHandle","View","StyleSheet","Dimensions","Keyboard","Animated","Extrapolate","Interactable","TapGestureHandler","Screen","width","get","height","Index","isBackDropDismissByPress","initialPosition","y","onChangeSnap","snapPoints","bottomSheerColor","backDropColor","isRoundBorderWithTipHeader","tipHeaderRadius","header","body","isBackDrop","isModal","dragEnabled","isAnimatedYFromParent","animatedValueY","containerStyle","bodyContainerStyle","tipStyle","headerStyle","bodyStyle","onClose","bounce","ref","_deltaY","Value","bottomPanel","_snapPoints","getSnapPoints","_initialPosition","getInitialPosition","isDismissWithPress","isBottomSheetDismissed","setIsBottomSheetDismissed","onDrawerSnap","snap","index","nativeEvent","value","dismissBottomSheet","findIndex","x","current","snapTo","dismiss","styles","panelContainer","backgroundColor","opacity","interpolate","inputRange","outputRange","extrapolateRight","CLAMP","top","marginTop","modal","panel","shadowColor","shadowOffset","shadowRadius","shadowOpacity","borderTopLeftRadius","borderTopRightRadius","panelHandle","panelHeader","create","container","flex","position","alignSelf","borderRadius","marginVertical","padding","bottom","left","right","map","snapItem","parentValue","split","snapObject","snapPoint"],"mappings":"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","sourcesContent":["import React, {\n  useState,\n  useRef,\n  forwardRef,\n  useImperativeHandle,\n} from 'react';\n\nimport {\n  View,\n  StyleSheet,\n  Dimensions,\n  Keyboard,\n  StyleProp,\n  ViewStyle,\n} from 'react-native';\n\nimport Animated, { Extrapolate } from 'react-native-reanimated';\nimport Interactable from 'react-native-interactable-reanimated';\nimport { TapGestureHandler } from 'react-native-gesture-handler';\n\nconst Screen = {\n  width: Dimensions.get('window').width,\n  height: Dimensions.get('window').height,\n};\ntype Porps = {\n  isBackDropDismissByPress: boolean;\n  initialPosition: object | any;\n  onChangeSnap: (data: object) => void;\n  snapPoints: Array<any>;\n  bottomSheerColor: string;\n  backDropColor: string;\n  isRoundBorderWithTipHeader: boolean;\n  tipHeaderRadius: number;\n  header: React.ReactNode;\n  body: React.ReactNode;\n  isBackDrop: boolean;\n  isModal: boolean;\n  dragEnabled: boolean;\n  isAnimatedYFromParent: boolean;\n  animatedValueY: any;\n  containerStyle: StyleProp<ViewStyle>;\n  bodyContainerStyle: StyleProp<ViewStyle>;\n  tipStyle: StyleProp<ViewStyle>;\n  headerStyle: StyleProp<ViewStyle>;\n  bodyStyle: StyleProp<ViewStyle>;\n  onClose: () => void;\n  bounce: number;\n};\nconst Index = forwardRef(\n  (\n    {\n      isBackDropDismissByPress,\n      initialPosition = { y: 0 },\n      onChangeSnap,\n      snapPoints,\n      bottomSheerColor = '#FFFFFF',\n      backDropColor = '#000000',\n      isRoundBorderWithTipHeader = false,\n      tipHeaderRadius = 12,\n      header,\n      body,\n      isBackDrop = false,\n      isModal,\n      dragEnabled = true,\n      isAnimatedYFromParent,\n      animatedValueY,\n      containerStyle,\n      bodyContainerStyle = {},\n      tipStyle,\n      headerStyle,\n      bodyStyle,\n      onClose,\n      bounce = 0.5,\n    }: Porps,\n    ref\n  ) => {\n    const [_deltaY] = useState(new Animated.Value(Screen.height));\n    const bottomPanel = useRef<any>();\n    const _snapPoints = getSnapPoints(snapPoints);\n    const _initialPosition = getInitialPosition(initialPosition);\n    const isDismissWithPress = isBackDropDismissByPress\n      ? isBackDropDismissByPress\n      : false;\n    const [\n      isBottomSheetDismissed,\n      setIsBottomSheetDismissed,\n    ] = useState<boolean>(initialPosition === 0 || initialPosition === '0%');\n\n    const onDrawerSnap = (snap: any) => {\n      const index = snap.nativeEvent.index;\n      const value = snapPoints[index];\n      if (value === 0 || value === '0%') {\n        setIsBottomSheetDismissed(true);\n        onClose && onClose();\n      } else {\n        setIsBottomSheetDismissed(false);\n      }\n      onChangeSnap && onChangeSnap({ index, value });\n    };\n\n    const dismissBottomSheet = () => {\n      let index = snapPoints.findIndex(\n        (x: number | string) => x === 0 || x === '0%'\n      );\n      if (index !== -1) {\n        bottomPanel.current.snapTo({ index });\n        onClose && onClose();\n      }\n    };\n\n    const snapTo = (index: number) => {\n      if (snapPoints.findIndex((x) => x === 0 || x === '0%') !== -1) {\n        Keyboard.dismiss();\n      }\n      bottomPanel.current.snapTo({ index });\n      const value = snapPoints[index];\n      onChangeSnap && onChangeSnap({ index, value });\n    };\n\n    useImperativeHandle(ref, () => ({\n      snapTo,\n      dismissBottomSheet,\n    }));\n\n    return (\n      <View style={styles.panelContainer} pointerEvents={'box-none'}>\n        {/* Backdrop */}\n        {isBackDrop && (\n          <Animated.View\n            pointerEvents={!isBottomSheetDismissed ? 'auto' : 'box-none'}\n            style={[\n              styles.panelContainer,\n              {\n                backgroundColor: backDropColor,\n                opacity: isAnimatedYFromParent\n                  ? animatedValueY.interpolate({\n                      inputRange: [0, Screen.height - 100],\n                      outputRange: [1, 0],\n                      extrapolateRight: Extrapolate.CLAMP,\n                    })\n                  : _deltaY.interpolate({\n                      inputRange: [0, Screen.height - 100],\n                      outputRange: [1, 0],\n                      extrapolateRight: Extrapolate.CLAMP,\n                    }),\n              },\n            ]}\n          />\n        )}\n\n        <Interactable.View\n          dragEnabled={isModal ? false : dragEnabled}\n          verticalOnly={true}\n          ref={bottomPanel}\n          snapPoints={_snapPoints}\n          initialPosition={_initialPosition}\n          boundaries={{ top: isModal ? 0 : -300, bounce: bounce }}\n          animatedValueY={isAnimatedYFromParent ? animatedValueY : _deltaY}\n          onSnap={onDrawerSnap}\n        >\n          {!isModal && isDismissWithPress && !isBottomSheetDismissed && (\n            <TapGestureHandler\n              enabled={isBackDrop}\n              onActivated={dismissBottomSheet}\n            >\n              <View\n                style={{\n                  height: Screen.height,\n                  marginTop: -Screen.height,\n                }}\n              />\n            </TapGestureHandler>\n          )}\n\n          <View\n            style={[\n              isModal ? styles.modal : styles.panel,\n              { backgroundColor: bottomSheerColor },\n              isRoundBorderWithTipHeader\n                ? [\n                    {\n                      backgroundColor: '#f7f5eee8',\n                      shadowColor: '#000000',\n                      shadowOffset: { width: 0, height: 0 },\n                      shadowRadius: 5,\n                      shadowOpacity: 0.4,\n                    },\n                    {\n                      borderTopLeftRadius: tipHeaderRadius,\n                      borderTopRightRadius: tipHeaderRadius,\n                    },\n                  ]\n                : {},\n              containerStyle,\n            ]}\n          >\n            <View\n              style={[\n                isModal ? styles.modal : styles.panel,\n                bodyContainerStyle,\n              ]}\n            >\n              {!isModal && isRoundBorderWithTipHeader && (\n                <View style={[styles.panelHandle, tipStyle]} />\n              )}\n              {!isModal && (\n                <View style={[styles.panelHeader, headerStyle]}>{header}</View>\n              )}\n              <View style={bodyStyle}>{body}</View>\n            </View>\n          </View>\n        </Interactable.View>\n      </View>\n    );\n  }\n);\n\nexport default Index;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  panelHandle: {\n    position: 'absolute',\n    alignSelf: 'center',\n    width: 40,\n    height: 6,\n    borderRadius: 4,\n    backgroundColor: '#00000040',\n    marginVertical: 8,\n  },\n  panel: {\n    height: Screen.height + 300,\n  },\n  modal: {\n    height: Screen.height + 300,\n  },\n  panelHeader: {\n    padding: 16,\n  },\n  panelContainer: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0,\n  },\n});\n\nconst getSnapPoints = (snapPoints: any) => {\n  return snapPoints.map((snapItem: any) => {\n    if (typeof snapItem === 'string') {\n      const parentValue: any = snapItem.split('%')[0];\n      snapItem = (Screen.height / 100) * parentValue;\n    }\n    const snapObject = { y: Screen.height - snapItem };\n    return snapObject;\n  });\n};\n\nconst getInitialPosition = (snapPoint: any) => {\n  if (typeof snapPoint === 'string') {\n    const parentValue: any = snapPoint.split('%')[0];\n    snapPoint = (Screen.height / 100) * parentValue;\n  }\n  const snapObject = { y: Screen.height - snapPoint };\n  return snapObject;\n};\n"]}